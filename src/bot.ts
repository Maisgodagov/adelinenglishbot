import TelegramBot from 'node-telegram-bot-api';
import * as dotenv from 'dotenv';

dotenv.config();

const token = process.env.BOT_TOKEN!;
const channelId = process.env.CHANNEL_ID!; // –§–æ—Ä–º–∞—Ç: @channelname –∏–ª–∏ -100123456789
const supportContact = process.env.SUPPORT_CONTACT || '@support';
const courseLink = process.env.COURSE_LINK || 'https://example.com/course';
const channelLink = process.env.CHANNEL_LINK || 'https://t.me/yourchannel';

// –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ë–î)
interface UserState {
  step: string;
  name?: string;
  phone?: string;
  hasPaid?: boolean;
  lastReminderSent?: number;
}

const userStates = new Map<number, UserState>();

const bot = new TelegramBot(token, { polling: true });

// –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
const contactKeyboard = {
  keyboard: [[{ text: '–û—Å—Ç–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç ‚òéÔ∏è', request_contact: true }]],
  resize_keyboard: true,
  one_time_keyboard: true
};

const subscribeKeyboard = {
  inline_keyboard: [
    [{ text: '–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª üì¢', url: channelLink }],
    [{ text: '–Ø –ø–æ–¥–ø–∏—Å–∞–ª–∞—Å—å ‚úÖ', callback_data: 'check_subscription' }]
  ]
};

const startKeyboard = {
  inline_keyboard: [[{ text: '–ù–∞—á–∞—Ç—å üöÄ', callback_data: 'start_warming' }]]
};

const showExampleKeyboard = {
  inline_keyboard: [[{ text: '–î–∞, –ø–æ–∫–∞–∂–∏ –ø—Ä–∏–º–µ—Ä üëÄ', callback_data: 'show_example' }]]
};

const wantDetailsKeyboard = {
  inline_keyboard: [[{ text: 'üí¨ –î–∞, —Ö–æ—á—É –ø–æ–¥—Ä–æ–±–Ω–µ–µ', callback_data: 'show_product' }]]
};

const paymentKeyboard = {
  inline_keyboard: [[{ text: 'üí≥ –û–ø–ª–∞—Ç–∏—Ç—å 1000‚ÇΩ', callback_data: 'payment' }]]
};

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
bot.onText(/\/start/, async (msg) => {
  const chatId = msg.chat.id;

  userStates.set(chatId, { step: 'greeting' });

  await bot.sendMessage(
    chatId,
    'üåü –ü—Ä–∏–≤–µ—Ç! –Ø ‚Äî –ê–¥–µ–ª–∏–Ω–∞, –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ –¥–ª—è –≤–∑—Ä–æ—Å–ª—ã—Ö –∏ –¥–µ—Ç–µ–π.\n\n' +
    '–£–∂–µ –±–æ–ª–µ–µ 10 –ª–µ—Ç –ø–æ–º–æ–≥–∞—é –º–∞–ª–µ–Ω—å–∫–∏–º –∏ –≤–∑—Ä–æ—Å–ª—ã–º –ø–µ—Ä–µ—Å—Ç–∞—Ç—å –±–æ—è—Ç—å—Å—è –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ, —É—á–∏—Ç—å —Å–ª–æ–≤–∞ –ª–µ–≥–∫–æ –∏ –Ω–∞–≤—Å–µ–≥–¥–∞ üìö\n\n' +
    '–ß—Ç–æ–±—ã –ø—Ä–∏—Å–ª–∞—Ç—å —Ç–µ–±–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –∏ –ø–æ–ª–µ–∑–Ω—ã–µ —Å–æ–≤–µ—Ç—ã, –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ üëá',
    { reply_markup: contactKeyboard }
  );
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–∞
bot.on('contact', async (msg) => {
  const chatId = msg.chat.id;
  const contact = msg.contact;
  const state = userStates.get(chatId);

  if (!state || state.step !== 'greeting') return;

  const firstName = contact?.first_name || msg.from?.first_name || '–¥—Ä—É–≥';

  userStates.set(chatId, {
    step: 'subscription_check',
    name: firstName,
    phone: contact?.phone_number
  });

  await bot.sendMessage(
    chatId,
    `–û—Ç–ª–∏—á–Ω–æ, ${firstName}! üëè\n\n` +
    '–ê —Ç—ã –∑–Ω–∞–ª(–∞), —á—Ç–æ –∫–∞–∂–¥—ã–π —Ä—É—Å—Å–∫–æ–≥–æ–≤–æ—Ä—è—â–∏–π —É–∂–µ –∑–Ω–∞–µ—Ç –∞–Ω–≥–ª–∏–π—Å–∫–∏–π, –ø—Ä–æ—Å—Ç–æ –Ω–µ –¥–æ–≥–∞–¥—ã–≤–∞–µ—Ç—Å—è –æ–± —ç—Ç–æ–º? üòâ\n\n' +
    '–ü–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –º–æ–π –∫–∞–Ω–∞–ª ‚Äî –ø–æ–∫–∞–∂—É, –∫–∞–∫ –∑–∞–≥–æ–≤–æ—Ä–∏—Ç—å –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º –±—ã—Å—Ç—Ä–µ–µ, —á–µ–º —Ç—ã –¥—É–º–∞–µ—à—å, –∏ –¥–∞–º –∫—É—á—É –ø–æ–ª–µ–∑–Ω—ã—Ö —Ä–∞–∑–±–æ—Ä–æ–≤.',
    { reply_markup: { remove_keyboard: true } }
  );

  await bot.sendMessage(
    chatId,
    '–ü–æ–¥–ø–∏—à–∏—Å—å, –∞ –ø–æ—Ç–æ–º –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ üëá',
    { reply_markup: subscribeKeyboard }
  );
});

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª
async function checkSubscription(chatId: number): Promise<boolean> {
  try {
    const member = await bot.getChatMember(channelId, chatId);
    return ['member', 'administrator', 'creator'].includes(member.status);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏:', error);
    return false;
  }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∫–Ω–æ–ø–æ–∫
bot.on('callback_query', async (query) => {
  const chatId = query.message!.chat.id;
  const messageId = query.message!.message_id;
  const data = query.data;
  const state = userStates.get(chatId);

  await bot.answerCallbackQuery(query.id);

  switch (data) {
    case 'check_subscription':
      const isSubscribed = await checkSubscription(chatId);

      if (isSubscribed) {
        userStates.set(chatId, { ...state!, step: 'warming' });

        await bot.editMessageReplyMarkup(
          { inline_keyboard: [] },
          { chat_id: chatId, message_id: messageId }
        );

        await bot.sendMessage(
          chatId,
          '–ö–ª–∞—Å—Å! üéâ –¢–µ–ø–µ—Ä—å —è –ø–æ–∫–∞–∂—É —Ç–µ–±–µ, –ø–æ—á–µ–º—É –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ –ª—é–¥–µ–π –Ω–µ –º–æ–≥—É—Ç –∑–∞–ø–æ–º–Ω–∏—Ç—å —Å–ª–æ–≤–∞ ‚Äî –∏ –∫–∞–∫ –∏—Å–ø—Ä–∞–≤–∏—Ç—å —ç—Ç–æ —Å –ø–æ–º–æ—â—å—é –º–æ–µ–π –∞–≤—Ç–æ—Ä—Å–∫–æ–π —Å–∏—Å—Ç–µ–º—ã "–ë—É–∫–≤–∞—Ä—å –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ".\n\n' +
          '–ì–æ—Ç–æ–≤? –ù–∞—á–Ω—ë–º —Å —Å–∞–º–æ–≥–æ –≥–ª–∞–≤–Ω–æ–≥–æ üí™',
          { reply_markup: startKeyboard }
        );
      } else {
        await bot.sendMessage(
          chatId,
          '‚ùå –ü–æ—Ö–æ–∂–µ, —Ç—ã –µ—â—ë –Ω–µ –ø–æ–¥–ø–∏—Å–∞–ª—Å—è –Ω–∞ –∫–∞–Ω–∞–ª. –ü–æ–¥–ø–∏—à–∏—Å—å –∏ –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É —Å–Ω–æ–≤–∞ üòä',
          { reply_markup: subscribeKeyboard }
        );
      }
      break;

    case 'start_warming':
      await bot.editMessageReplyMarkup(
        { inline_keyboard: [] },
        { chat_id: chatId, message_id: messageId }
      );

      await bot.sendMessage(
        chatId,
        'ü§î *–ü–æ—á–µ–º—É –º—ã —É—á–∏–º —Å–ª–æ–≤–∞ ‚Äî –∏ –∑–∞–±—ã–≤–∞–µ–º –∏—Ö —á–µ—Ä–µ–∑ –ø–∞—Ä—É –¥–Ω–µ–π?*\n\n' +
        '–ü–æ—Ç–æ–º—É —á—Ç–æ –º–æ–∑–≥ –Ω–µ –∑–∞–ø–æ–º–∏–Ω–∞–µ—Ç –∏–∑–æ–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–ª–æ–≤–∞, –µ–º—É –Ω—É–∂–Ω—ã —Å–≤—è–∑–∏ –∏ –æ–±—Ä–∞–∑—ã.\n\n' +
        '–Ø –ø–æ–∫–∞–∂—É —Ç–µ–±–µ, –∫–∞–∫ –º–æ–π "–ë—É–∫–≤–∞—Ä—å" –¥–µ–ª–∞–µ—Ç —ç—Ç–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏:\n\n' +
        '1Ô∏è‚É£ –ö–∞—Ä—Ç–∏–Ω–∫–∏ –¥–ª—è –ª—É—á—à–µ–π –∞—Å—Å–æ—Ü–∏–∞—Ü–∏–∏\n' +
        '2Ô∏è‚É£ –ì–æ–ª–æ—Å–æ–≤—ã–µ –∫–Ω–æ–ø–∫–∏ ‚Äî –∫–∞–∫ —Ç–≤–æ–π –ª–∏—á–Ω—ã–π —É—á–∏—Ç–µ–ª—å\n' +
        '3Ô∏è‚É£ –ó–∞–¥–∞–Ω–∏—è –¥–ª—è –∫–∞–∂–¥–æ–π –±—É–∫–≤—ã ‚Äî –∑–∞–∫—Ä–µ–ø–ª—è–µ–º –∑–Ω–∞–Ω–∏—è –Ω–∞ –ø—Ä–∞–∫—Ç–∏–∫–µ\n' +
        '4Ô∏è‚É£ –ü–æ–º–æ—â–Ω–∏–∫ —à–∞–≥ –∑–∞ —à–∞–≥–æ–º, –∫–æ—Ç–æ—Ä—ã–π –≤–µ–¥—ë—Ç –∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É\n\n' +
        '–•–æ—á–µ—à—å, –ø–æ–∫–∞–∂—É, –∫–∞–∫ —ç—Ç–æ –≤—ã–≥–ª—è–¥–∏—Ç –≤–Ω—É—Ç—Ä–∏?',
        { parse_mode: 'Markdown', reply_markup: showExampleKeyboard }
      );
      break;

    case 'show_example':
      await bot.editMessageReplyMarkup(
        { inline_keyboard: [] },
        { chat_id: chatId, message_id: messageId }
      );

      // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ/–∞—É–¥–∏–æ –∏–∑ –±—É–∫–≤–∞—Ä—è
      await bot.sendMessage(
        chatId,
        'üéØ –ú–∞–ª–µ–Ω—å–∫–∏–π –ª–∞–π—Ñ—Ö–∞–∫ –æ—Ç –º–µ–Ω—è:\n\n' +
        '–í–º–µ—Å—Ç–æ —Ç–æ–≥–æ —á—Ç–æ–±—ã —É—á–∏—Ç—å —Å–ª–æ–≤–æ "apple" –æ—Ç–¥–µ–ª—å–Ω–æ, —Å–≤—è–∂–∏ –µ–≥–æ —Å –æ–±—Ä–∞–∑–æ–º –∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º:\n\n' +
        'üçé *"I\'m eating an apple"* ‚Äî –∏ –º–æ–∑–≥ —Å–∞–º –∑–∞–ø–æ–º–∏–Ω–∞–µ—Ç.\n\n' +
        '–ò–º–µ–Ω–Ω–æ —Ç–∞–∫ —É—Å—Ç—Ä–æ–µ–Ω –º–æ–π "–ë—É–∫–≤–∞—Ä—å –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ" ‚Äî –±—É–∫–≤—ã, —Å–ª–æ–≤–∞, –∫–∞—Ä—Ç–∏–Ω–∫–∏, –ø—Ä–∏–º–µ—Ä—ã, –∞—Å—Å–æ—Ü–∏–∞—Ü–∏–∏.',
        { parse_mode: 'Markdown' }
      );

      setTimeout(async () => {
        await bot.sendMessage(
          chatId,
          'üéÅ *–ó–∞ 30 –¥–Ω–µ–π —Ç—ã –≤—ã—É—á–∏—à—å 500‚Äì1000 —Å–ª–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ —Ä–µ–∞–ª—å–Ω–æ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –≤ –∂–∏–∑–Ω–∏.*\n\n' +
          '–•–æ—á–µ—à—å –ø–æ–ª—É—á–∏—Ç—å –≤–µ—Å—å –ë—É–∫–≤–∞—Ä—å –∑–∞ 1000‚ÇΩ?',
          { parse_mode: 'Markdown', reply_markup: wantDetailsKeyboard }
        );
      }, 2000);
      break;

    case 'show_product':
      await bot.editMessageReplyMarkup(
        { inline_keyboard: [] },
        { chat_id: chatId, message_id: messageId }
      );

      await bot.sendMessage(
        chatId,
        'üéÅ *–ú–∏–Ω–∏-–∫—É—Ä—Å "–ë—É–∫–≤–∞—Ä—å –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ –æ—Ç –º–µ–Ω—è" ‚Äî —ç—Ç–æ:*\n\n' +
        '‚úÖ 30+ –∞—É–¥–∏–æ—É—Ä–æ–∫–æ–≤\n' +
        '‚úÖ –†–∞–∑–±–æ—Ä –∫–∞–∂–¥–æ–π –±—É–∫–≤—ã —Å –ø—Ä–∏–º–µ—Ä–∞–º–∏ —Å–ª–æ–≥–æ–≤ –∏ —Å–ª–æ–≤\n' +
        '‚úÖ –ê—É–¥–∏–æ-—Ñ–∞–π–ª—ã –¥–ª—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –ø—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏—è\n' +
        '‚úÖ –£–¥–æ–±–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ‚Äî –≤—Å—ë –Ω–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–µ\n\n' +
        'üí∞ *–°—Ç–æ–∏–º–æ—Å—Ç—å ‚Äî –≤—Å–µ–≥–æ 1000‚ÇΩ* (–≤–º–µ—Å—Ç–æ 2900‚ÇΩ).\n\n' +
        '–•–æ—á–µ—à—å –Ω–∞—á–∞—Ç—å —É—á–∏—Ç—å –∞–Ω–≥–ª–∏–π—Å–∫–∏–π —É–∂–µ —Å–µ–≥–æ–¥–Ω—è?',
        { parse_mode: 'Markdown', reply_markup: paymentKeyboard }
      );

      // –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä –¥–ª—è –¥–æ–∂–∏–º–∞ —á–µ—Ä–µ–∑ 24-48 —á–∞—Å–æ–≤
      userStates.set(chatId, { ...state!, step: 'offer_shown' });
      scheduleReminder(chatId);
      break;

    case 'payment':
      // –ó–¥–µ—Å—å –∏–Ω—Ç–µ–≥—Ä–∏—Ä—É–µ—Ç—Å—è –ø–ª–∞—Ç—ë–∂–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ (YooKassa, Stripe –∏ —Ç.–¥.)
      await bot.sendMessage(
        chatId,
        'üí≥ *–î–ª—è –æ–ø–ª–∞—Ç—ã —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º:*\n\n' +
        `${supportContact}\n\n` +
        '–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –≤—ã —Å—Ä–∞–∑—É –ø–æ–ª—É—á–∏—Ç–µ –¥–æ—Å—Ç—É–ø –∫ –∫—É—Ä—Å—É! üéâ',
        { parse_mode: 'Markdown' }
      );

      // –ò–º–∏—Ç–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã (–≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –Ω—É–∂–Ω–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –ø–ª–∞—Ç—ë–∂–∫–æ–π)
      // –ü–æ—Å–ª–µ —Ä–µ–∞–ª—å–Ω–æ–π –æ–ø–ª–∞—Ç—ã –≤—ã–∑–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é: await handleSuccessfulPayment(chatId);
      break;
  }
});

// –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã
async function handleSuccessfulPayment(chatId: number) {
  const state = userStates.get(chatId);

  userStates.set(chatId, { ...state!, hasPaid: true, step: 'paid' });

  await bot.sendMessage(
    chatId,
    'üéâ *–û—Ç–ª–∏—á–Ω–æ, –æ–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!*\n\n' +
    `–í–æ—Ç —Ç–≤–æ–π –¥–æ—Å—Ç—É–ø –∫ "–ë—É–∫–≤–∞—Ä—é –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ":\n${courseLink}\n\n` +
    '–ù–∞—á–Ω–∏ —Å 1-–≥–æ –¥–Ω—è ‚Äî –∏ —É–∂–µ —á–µ—Ä–µ–∑ –Ω–µ–¥–µ–ª—é –ø–æ—á—É–≤—Å—Ç–≤—É–µ—à—å, —á—Ç–æ –∑–∞–ø–æ–º–∏–Ω–∞–µ—à—å —Å–ª–æ–≤–∞ –ª–µ–≥–∫–æ. üìö\n\n' +
    '–ê —Ç–∞–∫–∂–µ, –∑–∞—Ö–æ–¥–∏ –≤ –º–æ–π –∫–∞–Ω–∞–ª –∏ –¥–µ–ª–∏—Å—å –≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è—Ö, —Å–∫–æ–ª—å–∫–æ —Å–ª–æ–≤ —É–¥–∞–ª–æ—Å—å –∑–∞–ø–æ–º–Ω–∏—Ç—å –∏ –≤—ã—É—á–∏—Ç—å! üòå\n\n' +
    `–ï—Å–ª–∏ —á—Ç–æ-—Ç–æ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –ø–∏—à–∏ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É: ${supportContact}`,
    { parse_mode: 'Markdown' }
  );
}

// –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —á–µ—Ä–µ–∑ 24-48 —á–∞—Å–æ–≤
function scheduleReminder(chatId: number) {
  const delay = 24 * 60 * 60 * 1000; // 24 —á–∞—Å–∞

  setTimeout(async () => {
    const state = userStates.get(chatId);

    if (state && !state.hasPaid && state.step === 'offer_shown') {
      await bot.sendMessage(
        chatId,
        'üëã –ü—Ä–∏–≤–µ—Ç, —ç—Ç–æ —Å–Ω–æ–≤–∞ –ê–¥–µ–ª–∏–Ω–∞!\n\n' +
        '–ù–∞–ø–æ–º–∏–Ω–∞—é, —á—Ç–æ –¥–æ—Å—Ç—É–ø –∫ "–ë—É–∫–≤–∞—Ä—é –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ" –µ—â—ë –æ—Ç–∫—Ä—ã—Ç ‚Äî –∏ —Å–µ–π—á–∞—Å –æ–Ω —Å—Ç–æ–∏—Ç –≤—Å–µ–≥–æ 1000‚ÇΩ.\n\n' +
        '‚è∞ –£–∂–µ –∑–∞–≤—Ç—Ä–∞ —Ü–µ–Ω–∞ –º–æ–∂–µ—Ç –≤—ã—Ä–∞—Å—Ç–∏.\n\n' +
        '–•–æ—á–µ—à—å —É—Å–ø–µ—Ç—å –∑–∞–±—Ä–∞—Ç—å –ø–æ —Å—Ç–∞—Ä–æ–π —Ü–µ–Ω–µ?',
        { reply_markup: paymentKeyboard }
      );

      userStates.set(chatId, { ...state, lastReminderSent: Date.now() });
    }
  }, delay);
}

// –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –∞–¥–º–∏–Ω–∞ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã
bot.onText(/\/paid (\d+)/, async (msg, match) => {
  const adminId = msg.from?.id;
  const targetUserId = parseInt(match![1]);

  // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —á—Ç–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å - –∞–¥–º–∏–Ω (–¥–æ–±–∞–≤—å—Ç–µ —Å–≤–æ–π ID –≤ .env)
  const adminIds = process.env.ADMIN_IDS?.split(',').map(id => parseInt(id)) || [];

  if (adminIds.includes(adminId!)) {
    await handleSuccessfulPayment(targetUserId);
    await bot.sendMessage(msg.chat.id, `‚úÖ –î–æ—Å—Ç—É–ø –≤—ã–¥–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${targetUserId}`);
  } else {
    await bot.sendMessage(msg.chat.id, '‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞');
  }
});

console.log('ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!');
